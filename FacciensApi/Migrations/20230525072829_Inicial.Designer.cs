// <auto-generated />
using System;
using FacciensApi;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FacciensApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230525072829_Inicial")]
    partial class Inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("FacciensApi.Entidades.AdjuntoPublicacion", b =>
                {
                    b.Property<int>("AdjuntoPublicacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Foto")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int>("PublicacionId")
                        .HasColumnType("int");

                    b.HasKey("AdjuntoPublicacionId");

                    b.HasIndex("PublicacionId");

                    b.ToTable("AdjuntoPublicacion");
                });

            modelBuilder.Entity("FacciensApi.Entidades.Comentario", b =>
                {
                    b.Property<int>("ComentarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("DisenoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ComentarioId");

                    b.HasIndex("DisenoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Comentario");
                });

            modelBuilder.Entity("FacciensApi.Entidades.Diseno", b =>
                {
                    b.Property<int>("DisenoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dificultad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstiloId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Materiales")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PrendaId")
                        .HasColumnType("int");

                    b.Property<int>("TelaId")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioIdCreador")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UsuarioIdModificacion")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float?>("Valoracion")
                        .HasColumnType("real");

                    b.HasKey("DisenoId");

                    b.HasIndex("EstiloId");

                    b.HasIndex("PrendaId");

                    b.HasIndex("TelaId");

                    b.HasIndex("UsuarioIdCreador");

                    b.HasIndex("UsuarioIdModificacion");

                    b.ToTable("Diseno");
                });

            modelBuilder.Entity("FacciensApi.Entidades.Estilo", b =>
                {
                    b.Property<int>("EstiloId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("UsuarioIdCreador")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UsuarioIdModificacion")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EstiloId");

                    b.HasIndex("UsuarioIdCreador");

                    b.HasIndex("UsuarioIdModificacion");

                    b.ToTable("Estilo");
                });

            modelBuilder.Entity("FacciensApi.Entidades.ImagenDiseno", b =>
                {
                    b.Property<int>("ImagenDisenoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisenoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Foto")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("UsuarioIdCreador")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UsuarioIdModificacion")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ImagenDisenoId");

                    b.HasIndex("DisenoId");

                    b.HasIndex("UsuarioIdCreador");

                    b.HasIndex("UsuarioIdModificacion");

                    b.ToTable("ImagenDiseno");
                });

            modelBuilder.Entity("FacciensApi.Entidades.Prenda", b =>
                {
                    b.Property<int>("PrendaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("UsuarioIdCreador")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UsuarioIdModificacion")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PrendaId");

                    b.HasIndex("UsuarioIdCreador");

                    b.HasIndex("UsuarioIdModificacion");

                    b.ToTable("Prenda");
                });

            modelBuilder.Entity("FacciensApi.Entidades.Proyecto", b =>
                {
                    b.Property<int>("ProyectoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("DisenoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaGuardado")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Realizado")
                        .HasColumnType("bit");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProyectoId");

                    b.HasIndex("DisenoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Proyecto");
                });

            modelBuilder.Entity("FacciensApi.Entidades.Publicacion", b =>
                {
                    b.Property<int>("PublicacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Texto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PublicacionId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Publicacion");
                });

            modelBuilder.Entity("FacciensApi.Entidades.Tela", b =>
                {
                    b.Property<int>("TelaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UsuarioIdCreador")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UsuarioIdModificacion")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TelaId");

                    b.HasIndex("UsuarioIdCreador");

                    b.HasIndex("UsuarioIdModificacion");

                    b.ToTable("Tela");
                });

            modelBuilder.Entity("FacciensApi.Entidades.UsuarioSeguidor", b =>
                {
                    b.Property<int>("RegistroId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("UsuarioSeguidoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UsuarioSeguidorId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RegistroId");

                    b.HasIndex("UsuarioSeguidoId");

                    b.HasIndex("UsuarioSeguidorId");

                    b.ToTable("UsuarioSeguidor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UsuarioId");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Password");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Usuario", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FacciensApi.Entidades.AdjuntoPublicacion", b =>
                {
                    b.HasOne("FacciensApi.Entidades.Publicacion", "Publicacion")
                        .WithMany("adjuntoPublicaciones")
                        .HasForeignKey("PublicacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publicacion");
                });

            modelBuilder.Entity("FacciensApi.Entidades.Comentario", b =>
                {
                    b.HasOne("FacciensApi.Entidades.Diseno", "Diseno")
                        .WithMany("Comentarios")
                        .HasForeignKey("DisenoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Diseno");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("FacciensApi.Entidades.Diseno", b =>
                {
                    b.HasOne("FacciensApi.Entidades.Estilo", "Estilo")
                        .WithMany()
                        .HasForeignKey("EstiloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FacciensApi.Entidades.Prenda", "Prenda")
                        .WithMany()
                        .HasForeignKey("PrendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FacciensApi.Entidades.Tela", "Tela")
                        .WithMany()
                        .HasForeignKey("TelaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "UsuarioCreador")
                        .WithMany()
                        .HasForeignKey("UsuarioIdCreador");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "UsuarioModificacion")
                        .WithMany()
                        .HasForeignKey("UsuarioIdModificacion");

                    b.Navigation("Estilo");

                    b.Navigation("Prenda");

                    b.Navigation("Tela");

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioModificacion");
                });

            modelBuilder.Entity("FacciensApi.Entidades.Estilo", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "UsuarioCreador")
                        .WithMany()
                        .HasForeignKey("UsuarioIdCreador");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "UsuarioModificacion")
                        .WithMany()
                        .HasForeignKey("UsuarioIdModificacion");

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioModificacion");
                });

            modelBuilder.Entity("FacciensApi.Entidades.ImagenDiseno", b =>
                {
                    b.HasOne("FacciensApi.Entidades.Diseno", "Diseno")
                        .WithMany()
                        .HasForeignKey("DisenoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "UsuarioCreador")
                        .WithMany()
                        .HasForeignKey("UsuarioIdCreador");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "UsuarioModificacion")
                        .WithMany()
                        .HasForeignKey("UsuarioIdModificacion");

                    b.Navigation("Diseno");

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioModificacion");
                });

            modelBuilder.Entity("FacciensApi.Entidades.Prenda", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "UsuarioCreador")
                        .WithMany()
                        .HasForeignKey("UsuarioIdCreador");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "UsuarioModificacion")
                        .WithMany()
                        .HasForeignKey("UsuarioIdModificacion");

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioModificacion");
                });

            modelBuilder.Entity("FacciensApi.Entidades.Proyecto", b =>
                {
                    b.HasOne("FacciensApi.Entidades.Diseno", "Diseno")
                        .WithMany()
                        .HasForeignKey("DisenoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Diseno");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("FacciensApi.Entidades.Publicacion", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("FacciensApi.Entidades.Tela", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "UsuarioCreador")
                        .WithMany()
                        .HasForeignKey("UsuarioIdCreador");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "UsuarioModificacion")
                        .WithMany()
                        .HasForeignKey("UsuarioIdModificacion");

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioModificacion");
                });

            modelBuilder.Entity("FacciensApi.Entidades.UsuarioSeguidor", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "UsuarioSeguido")
                        .WithMany()
                        .HasForeignKey("UsuarioSeguidoId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "UsuarioSigue")
                        .WithMany()
                        .HasForeignKey("UsuarioSeguidorId");

                    b.Navigation("UsuarioSeguido");

                    b.Navigation("UsuarioSigue");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FacciensApi.Entidades.Diseno", b =>
                {
                    b.Navigation("Comentarios");
                });

            modelBuilder.Entity("FacciensApi.Entidades.Publicacion", b =>
                {
                    b.Navigation("adjuntoPublicaciones");
                });
#pragma warning restore 612, 618
        }
    }
}
